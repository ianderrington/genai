{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"\ud83c\udf89 Welcome!","text":"<p>Welcome to our open-source project on Generative AI, or GenAI \ud83e\udd16. The field of GenAI is rapidly expanding and becoming increasingly complex, and our mission is to make this topic more accessible and understandable for everyone.</p> <p>This project aims to provide comprehensive, full-spectrum knowledge on a range of GenAI topics \ud83d\udcd8. We've built this documentation in Markdown to encourage collaboration and continuous learning through GitHub pull requests \ud83e\udd1d.</p> <p>One of our main goals is to have this project written by GenAI itself \ud83d\ude80, enabling us to keep up with the complexity of information and advances in the field. To achieve this, we are focusing on:</p> <ul> <li>\ud83d\udcdd Creating a useful, base documentation repository that aids authors in generating self-descriptive repositories.</li> <li>\ud83d\udd04 Developing an automated merge and build system for the website that delivers information in an aesthetic and readable manner.</li> <li>\ud83d\udd01 Establishing a self-referential build system using Langchain and learned information, potentially utilizing AutoPR, among others.</li> </ul> <p>We are aware this is an ambitious task, but we believe in the power of GenAI to explain itself in a way that everyone can understand and benefit from \ud83d\udcaa. If you share our vision and would like to contribute, we warmly welcome your input. Please follow these guidelines to create a PR. Together, let's push the boundaries of what we can do with GenAI! \ud83c\udf0d</p>"},{"location":"to_sort.html","title":"To sort","text":"<p>phi 1 https://www.reddit.com/r/LocalLLaMA/comments/14ez6qf/microsoft_makes_new_13b_coding_llm_that/ chat law https://arxiv.org/abs/2306.16092v1?utm_source=tldrai  talk codebase https://github.com/rsaryev/talk-codebase?utm_source=tldrai</p> <p>https://martinfowler.com/articles/building-boba.html?utm_source=tldrai</p> <p>rap reproducible analytic pipelines https://digital.nhs.uk/blog/data-points-blog/2023/why-were-getting-our-data-teams-to-rap#:~:text=Reproducible%20analytical%20pipelines%20(RAP)%20are,in%20our%20Data%20Services%20directorate</p> <p>build your own data https://arxiv.org/abs/2306.13651v1?utm_source=tldrai self supervized</p> <p>https://styledrop.github.io/ https://www.youtube.com/watch?v=Ff4fRgnuFgQ&amp;t=9s</p> <p>https://github.com/langchain-ai/streamlit-agent https://github.com/smol-ai/developer https://github.com/vinayprabhu/X-is-all-you-need https://github.com/ThomasEwing04/SMOL_AI https://github.com/kyrolabs/awesome-langchain https://cameronrwolfe.substack.com/p/teaching-language-models-to-use-tools?r=2bjtip&amp;utm_medium=ios&amp;utm_campaign=post</p> <p>https://www.quivr.app/chat</p>"},{"location":"Background/index.html","title":"Index","text":"<p>Background overview</p>"},{"location":"Background/agent/index.html","title":"Agents Gen(erative) AI","text":"<p>Agents in Gen()AI agents have access to 'tools' to provide them 'agency' beyond the ability to generate text or image based responses to the input data. They rely on several important concepts:</p> <pre><code>graph TB\n    Agent((Agent)) --&gt;|makes| decision((Decision))\n    decision --&gt;|attempts| action((Action))\n    action --&gt;|passes| execution((Execution))\n    execution --&gt;|affects| environment((Environment))\n    execution --&gt;|generates| agentMemory((Agent's Memory))\n    agentMemory --&gt;|informs and effects| Agent\n    environment --&gt;|provides| observations((Observations))\n    observations --&gt;|informs and effects| Agent\n    execution --&gt;|queries| environment\n    AgentManager((Agent Manager)) --&gt;|affects| execution\n    Agent --&gt; |informs and effects| AgentManager\n    AgentManager --&gt; |informs and effects| Agent</code></pre>"},{"location":"Background/agent/index.html#lists-and-websites","title":"Lists and websites","text":"<ul> <li>Agents overview by Lilian Weng</li> <li>Awesome AGents of nicely curated AGents that helps to understand the differences they might contain.</li> </ul>"},{"location":"Background/agent/index.html#basic-concepts","title":"Basic Concepts","text":"<ul> <li>(LLM) model: The 'intelligent' component returns an output for a given input. </li> <li>Inceptions: The prompt that orient's and agent's response. </li> <li>Memory access</li> <li>Tool Access</li> <li>Chains and flows</li> <li>Security Features</li> <li>Output formatting</li> <li>Systems of Agents</li> </ul> <p>Similar to automota, they may have the ability to run discretely, separately from standard chat-interfaces. Generally they involve the possibility of Human-in-the-loop to help correct odd components. </p> <p>The ability to call programs, APIs, software, cursors, robots, or other non-language systems. </p>"},{"location":"Background/agent/index.html#memory-access","title":"Memory Access","text":""},{"location":"Background/agent/index.html#tool-access","title":"Tool Access","text":"<ul> <li>Native function calls and json support with OpenAI </li> <li>AutoLabel A nice pythonic system for generating semantic labels repeatedly for use in downstream datasets</li> </ul>"},{"location":"Background/agent/index.html#guidance","title":"Guidance","text":"<ul> <li>\u203c\ufe0fGuidance Interleaving generation, prompting and logical control to single  continuous flow.</li> </ul>"},{"location":"Background/agent/index.html#security-features","title":"Security Features","text":"<ul> <li>\u203c\ufe0fSemantic Kernel</li> <li>\u203c\ufe0f Rebuff a prompt injection detection service.</li> <li>\u203c\ufe0f Guardrails To help format output and prevent improper prompts.</li> <li>Native function calls and json support with OpenAI </li> <li>AutoLabel A nice pythonic system for generating semantic labels repeatedly for use in downstream datasets</li> </ul>"},{"location":"Background/agent/index.html#agent-networks","title":"Agent Networks","text":"<p>Generative AI networks involve the interaction of multiple individual Gen()AI elements that can act, to a coordinated degree, independently of other AI Agents. </p>"},{"location":"Background/agent/index.html#to-organize","title":"TO ORGANIZE","text":""},{"location":"Background/agent/index.html#recurrent-and-self-improving","title":"Recurrent and self-improving","text":"<ul> <li>\u203c\ufe0f ReAct Github </li> <li>Effectively Observe, Think, Act, Repeat. Has limited action space </li> <li>Reflexion: \"Reflexion, an approach that endows an agent with dynamic memory and self-reflection capabilities to enhance its existing reasoning trace and task-specific action choice abilities\"</li> <li>Github</li> <li>Inspired github </li> <li> <p>Teaching Large Language Models to Self-Debug <code>transcoder</code> </p> </li> <li> <p>Self-play GPT Uses different LLMs and different roles to provide feedback on how to improve and enable autonomous improvement while game playing. </p> </li> <li>Language Models can Solve Computer Tasks, Website, GitHub USes Recursive Criticism and Improvement. Combining with Chain of Thought it is even better. The method: Plan: Critique, Improve </li> <li>Explicit RCI: \"Review your previous answer and find problems with your answer.\" \u2192 \"Based on the problems you found, improve your answer.\" Recursively Criticizes and Improves its output. This sort of prompting outperforms Chain of Thought, and combined it works even better.  </li> <li>GPT-Bargaining Uses multiple rounds to improve negotiation tactics based on external feedback. (Manager-like)</li> <li> <p>\u203c\ufe0fRL4L Allen ai Uses smaller critique model feedback to improve larger model output with a policy gradient to fine-tune the critique model while allowing reasonable performance gains. Github</p> </li> <li> <p>Strategic Reasoning with Language Models Uses game trees and observed and inferred beliefs to achieve closer to optimal results. Powerful to consider for inferred beliefs and interacting in situations where negotiation or games are being played.  https://arxiv.org/pdf/2306.08640.pdf</p> </li> </ul>"},{"location":"Background/agent/index.html#agentic","title":"Agentic","text":""},{"location":"Background/agent/index.html#results","title":"Results","text":"<ul> <li>Toolformer This section describes GPT that has been enabled with more 'agency' or the ability to do better.</li> <li>HuggingGPT of 2023 This paper describes a paradigm where ChatGPT is enabled with the ability to launch other ML models based on input. It does so by creating a Task list, then by identifying appropriate models, and then executing them.</li> <li>\u203c\ufe0f Github repo known as JARVIS here</li> <li>TaskMatrix.ai seemingly from the same authors. </li> <li>AUTO GPT Auto GPT</li> <li>\u203c\ufe0f GPT engineer</li> <li>\u203c\ufe0f BabyAGI</li> <li>\u203c\ufe0f CAMEL inception prompting to guide chat agents toward task completion. Also implemented in Langchain</li> <li>Loop GPT A re-implementation of Auto-GPT with modularity and extensibility in mind. </li> <li>Chameleon GPT A multi-agentic service that is able to accomplish many separate tasks, building it compositionally. (Project Idea: build in Langchain???) </li> <li>Baize: An Open-Source Chat Model with Parameter-Efficient Tuning on Self-Chat Data Parameter efficient LLama Tuning and risk minimization with a new 'Self Distillation' with Feedback to improve itself even more. RESEARCH ONLY</li> <li>\u203c\ufe0fRobo-GPT</li> <li>(Open source + Product) Agent-GPT and WEbsite \u2192 Doesn't have agency/tools... So it is not good. A fancy wrapper for multi-task planning and execution. Limited at present. </li> <li>\u203c\ufe0f (Open source + product) Super-AGI  \u2192 Seemingly better than SuperAGI because more tools accessible and GUI. Allows multiple agents (no communication though)</li> <li>\u203c\ufe0f  [AssistGPT: A General Multi-modal Assistant that can Plan, Execute, Inspect, and Learn] (https://arxiv.org/pdf/2306.08640.pdf) Webpage Uses PEIL PLan execute inspect learn. Code coming soon. </li> <li>\u203c\ufe0f GPT Engineer</li> </ul>"},{"location":"Background/agent/index.html#agent-improvements","title":"Agent Improvements","text":"<ul> <li>Learning to Reason and Memorize with Self-Notes \"Allows model to deviate from input context at any time to reason and take notes\"</li> </ul> <ul> <li>Large language models as tool makers Github Allows high-quality tools to be reused by more lightweight models.</li> </ul> <ul> <li>CREATOR: Disentangling Abstract and Concrete Reasonings of Large Language Models through Tool Creation</li> </ul>"},{"location":"Background/agent/index.html#agentic_1","title":"Agentic","text":"<ul> <li>smolai https://www.youtube.com/watch?v=zsxyqz6SYp8&amp;t=1s</li> </ul>"},{"location":"Background/agent/index.html#chatbots","title":"Chatbots","text":"<ul> <li>LAION-AI An attempt an open-version of ChatGPT</li> </ul>"},{"location":"Background/agent/chains.html","title":"Chains","text":""},{"location":"Background/agent/chains.html#chains","title":"Chains","text":"<p>Chains can be considered linked generative interactions where information can be processed with interepreters, tools, or other agents/GenAIs.</p> <p>Done well, they can be built up to form reasoning systems that can enable more successful reasoning, or task completion. </p> <ul> <li>Chain of thought hub</li> </ul>"},{"location":"Background/agent/chains.html#concepts","title":"Concepts","text":""},{"location":"Background/agent/chains.html#tree-of-thought","title":"Tree of Thought","text":"<ul> <li>Large Language Model Guided Tree-of-Thought Github</li> <li>\u203c\ufe0fTree of Thoughts: Deliberate Problem Solving with Large Language Models Github IDEA: Write Tree of Thoughts into Langchain?</li> <li> <p>\u203c\ufe0fMeta Tree of thought</p> </li> <li> <p>Graph of Thought An excellent thought on what next to consider when dealing with knowledge (or other output like information) generation chains. </p> </li> <li> <p>Certified Reasoning with Language models A 'logical guide' tool that an LLM can use. It \" uses constrained decoding to ensure the model will incrementally generate one of the valid outputs.\" </p> </li> </ul>"},{"location":"Background/agent/chains.html#implementation","title":"Implementation","text":""},{"location":"Background/agent/chains.html#langchain","title":"Langchain","text":"<ul> <li>\u203c\ufe0fLangchain A primative python or javascript based primitive 'LLM' language that enables planned and agentic AI.</li> <li>\u203c\ufe0fLangflow </li> <li>\u203c\ufe0fAwesome Langchain</li> <li> <ul> <li>\u203c\ufe0fToolkit Generates LangChain plugins</li> </ul> </li> </ul>"},{"location":"Background/agent/chains.html#tutorials","title":"Tutorials","text":"<ul> <li>https://www.pinecone.io/learn/langchain-prompt-templates/</li> <li>https://learn.deeplearning.ai/langchain/lesson/3/memory</li> </ul>"},{"location":"Background/agent/chains.html#llama-index","title":"Llama index","text":"<ul> <li>llama index and Github for integrating data ingestion and models. </li> <li>LlamaHub (community library of data loaders)</li> <li>LlamaLab (cutting-edge AGI projects using LlamaIndex)</li> </ul>"},{"location":"Background/agent/chains.html#others","title":"Others","text":"<ul> <li>\u203c\ufe0fFlowise</li> <li>\uff01Chain Forge A data flow prompt engineering environment for evaluating ana analyzing LLM responses</li> <li>\u203c\ufe0f EmbedChain Creates embeddings for bots to be used. </li> <li>\u203c\ufe0fllm-chain ChatGPT and Alpaca support. Agentic with bash commands.</li> </ul>"},{"location":"Background/agent/environments.html","title":"Environments","text":"<p>Environments consist of the information that an agent, or system of agents has access too. It can be the set of origins from where the agent gets its observations. These origins can places like be 'a person' as is for a chat-interface, a web-stream, for an alert agent. a simulation of a town. </p> <p>The environment also 'interprets' the output of any agent, possibly changing the environment or executing other sub-commands.  Effectively, the environment can be considered as performing tool-execution. </p> <p>In another example, the environment might parse an English-text output into a python-executable, and </p> <p>The environment can be considered, </p>"},{"location":"Background/agent/implementation.html","title":"Implementation","text":"<p>Below are suggested implementation requirements, prioritization conditions, and examples codebases enablign ML agents. </p>"},{"location":"Background/agent/memory.html","title":"Memory","text":""},{"location":"Background/agent/memory.html#vector-databases","title":"Vector databases","text":"<ul> <li>Vector Databases (primer by Pinecone.io) Use embeddings to create query vector databases such as:    Pinecone, Qdrant, Weaviate, Chroma as well as the incumbents Faiss, Redis, Milvus, ScaNN.</li> <li>https://github.com/Helicone/helicone</li> </ul>"},{"location":"Background/agent/memory.html#memory-augmented","title":"Memory Augmented","text":"<ul> <li>Improving language models by retrieving from trillions of tokens</li> </ul>"},{"location":"Background/agent/systems.html","title":"Systems","text":"<p>When an agent (or model) interacts with a different agent in some way, it becomes a system of agents. This can be created by incepting and equipping different agents and enabling their output to be ingested and returned. It could be considered that an agent's input can be regarded as nother 'tool' where the call to the tool is to the different agent. While a reasonable perspective, because the same considerations can generally be applied to all agents, but not tools, we consider it separately. </p> <p>Binary system (asymmetric calling)</p> <p>ChatGPT calls DallE with a prompt it generated. DallE returns an image that is either returned or otherwise used in Chat GPT's final response.</p> <p>Multi-body system (bidirectional calling)</p> <p>A group of agents discussing their daily affairs and getting periodic environmental updates, like this paper</p>"},{"location":"Background/agent/systems.html#multi-agentic-systems","title":"Multi-Agentic Systems","text":"<ul> <li> <p>Can Language Models Teach Weaker Agents? Teacher Explanations Improve Students via Theory of Mind Uses Theory fo Mind to try to improve student performance. Github</p> </li> <li> <p>Generative Agents: Interactive Simulacra of Human Behavior A simulation of different agents of different personalities with a time-evolving environment that could be manipulated by the agents.   In it they discuss several challenges and solutions:</p> <p>Remembering</p> <p>Observation Memory A memory stream maintaining a record of experience: memory objects with a description in natural language, and timestamping. Uses, recency, importance and relevance_ to add weight to information that is more recent, how the memory is compared in relation to other memories, and how the information pertains to the present situation. </p> <p>Reflection Memory Which is a separate tipe of memory that allow more abstract thoughts for the agent. They can be included alongside the reflections. (Hardcoded when this happens, in relation to sum of importance scores &gt; threshold)</p> <p>Planning and Reacting</p> <p>Recursive Planning used to generate the day into several chunks of goals. These are then broken down to smaller timespaces. Plans can change based on interactions. (perhaps present status, planned and past) </p> </li> </ul>"},{"location":"Background/agent/systems.html#optimizations","title":"Optimizations","text":"<ul> <li>Multi-Agent Collaboration via Reward Attribution Decomposition     Describes optimization of multi agent with distributed reward systems to get SOA performance. It is a joint optimization allowing decentralized Q-function that relies on self and interactive terms. </li> </ul>"},{"location":"Background/agent/types.html","title":"Types","text":"<p>Agent types can be described by direct agentic ability to cause a change in the world.</p>"},{"location":"Background/agent/types.html#text-agent","title":"Text Agent","text":"<p>An agent that can output only language text. Even thought the language can be 'interpreted' into different things, as is done in the environment. </p>"},{"location":"Background/agent/types.html#text-image-agent","title":"Text + Image Agent","text":"<p>An agent that can output </p>"},{"location":"Background/agent/types.html#robotic-agent","title":"Robotic Agent","text":"<p>A robotic agent can control mechanism impacting the mechanical position or other activity of a device. </p> <pre><code>graph TB\n    Agent((Agent)) --&gt;|makes| decision((Decision))\n    decision --&gt;|attempts| action((Action))\n    action --&gt;|passes| execution((Execution))\n    execution --&gt;|affects| environment((Environment))\n    execution --&gt;|generates| agentMemory((Agent's Memory))\n    agentMemory --&gt;|informs and effects| Agent\n    environment --&gt;|provides| observations((Observations))\n    observations --&gt;|informs and effects| Agent\n    execution --&gt;|queries| environment\n    AgentManager((Agent Manager)) --&gt;|affects| execution\n    Agent --&gt; |informs and effects| AgentManager\n    AgentManager --&gt; |informs and effects| Agent</code></pre>"},{"location":"Background/computation/index.html","title":"Index","text":"<p>\ud83d\udea7 This section is under construction \ud83c\udfd7\ufe0f</p>"},{"location":"Background/computation/index.html#gpus","title":"GPUs","text":"<p>In order to create models, large volumes of matrix multiplication is necessary. GPUs are designed for this. </p>"},{"location":"Background/computation/index.html#references","title":"References","text":"<p>Tim Dettmers on GPUs \ufffc</p>"},{"location":"Background/data/index.html","title":"Data","text":"<p>Data is the most important part of training any model. </p> <p>Data can be 'real' or 'simulated', though there is general consensus that simulated data can lead to worse models. </p>"},{"location":"Background/data/index.html#data-sets","title":"Data sets","text":"<p>RedPajama Pile CommonCrawl (webscrape) C4 (CommonCrawl) Github Books Arxiv StackExchange</p> <ul> <li> <p>unarXive 2022: All arXiv Publications Pre-Processed for NLP</p> </li> <li> <p>Redpajama</p> </li> <li>BIG-bench APACHE 2.0</li> <li>Metaseq For working with Oen pre-trained transformers (from fairseq)</li> </ul>"},{"location":"Background/data/index.html#simulated","title":"Simulated","text":"<ul> <li>\u201cTextbooks are all you need\u201d A to-be opensourced high-quality model by Microsoft revealing the importance of high-quality input data. only used 4 days on 8 A-100s to train to reach out-performing results. (It also uses a lot of simulated data). Coding-focused model. </li> </ul>"},{"location":"Background/data/index.html#llm-extraction","title":"LLM-extraction","text":"<ul> <li>\u203c\ufe0fKor For extracting strucutred data using LLMs.</li> </ul>"},{"location":"Background/data/index.html#scaling-laws","title":"Scaling Laws","text":"<ul> <li>The 'Chinchilla' paper of 2022 This paper identifies scaling laws that help to understand the volume of data that is needed to obtain 'optimal' performance for a given LLM models size. Use of it in other areas, such as for Llama reveals that the models may have been under-trained.</li> <li>Primary takeaway: **\"All three approaches suggest that as compute budget increases, model size and the amount of training data should be increased in approximately equal proportions.\" **</li> </ul>"},{"location":"Background/data/representations.html","title":"Representations","text":"<p>Data, represented on disk in binary, though perhaps read in different digital representations  is broken up into individual units called tokens. These tokens, corresponding to contiguous strings of </p>"},{"location":"Background/data/representations.html#digital-representations","title":"Digital Representations","text":"<p>Digital representations relates to how data is encoded into memory (short, long) in any way. When it comes to text, the most common representations are utf8 and ascii. It is possible, and potentially useful to consider pure 'binary' representations, especially when considering multimodal data (see below).</p>"},{"location":"Background/data/representations.html#tokenization","title":"Tokenization","text":"<ul> <li>Neural Machine Translation of Rare Words with Subword Units Indicates that breaking up words can offer high value results (2015)</li> </ul>"},{"location":"Background/data/representations.html#multimodal","title":"Multimodal","text":"<ul> <li>\u203c\ufe0f Bytes are all you need Reveals that just taking file bytes into transformer technology can directly enable improvements in performance accuracy. The accuracy method varies based on encoding method. Their model is called ByteFormer Github</li> </ul>"},{"location":"Background/data/representations.html#tokenization_1","title":"Tokenization","text":"<ul> <li>Tiktoken uses BPE and is theoretically used in GPT models. Can be used on pure-binary and limited character data (I've checked!). </li> <li>Token Monster Uses 35% fewer tokens and uses a top-down approach, instead of a bottom-up constructive approach. Likely of high value. </li> </ul>"},{"location":"Background/data/representations.html#special-tokens","title":"Special tokens","text":"<p>There are special tokens that are used by high-level interpreters on what next to do. </p> <pre><code>START_TOKEN\nSTOP_TOKEN \nMASK_TOKEN\nMODALITY_TOKEN\n</code></pre> <p><code>mask_token</code>, <code>bos_token</code> (beginning of sequence), <code>eos_token</code></p>"},{"location":"Background/data/representations.html#embeddings","title":"Embeddings","text":"<p>\u203c\ufe0fWhat are EmbeddingsGithub</p>"},{"location":"Background/data/representations.html#_1","title":"Representations","text":""},{"location":"Background/engineering/index.html","title":"Engineering","text":""},{"location":"Background/engineering/index.html#engineering-and-deployment","title":"Engineering and Deployment","text":"<ul> <li>Deploying on Azure for Embeddings</li> <li> <p>Integrating with Azure Services</p> </li> <li> <p>Langchain service deployment</p> </li> </ul>"},{"location":"Background/engineering/index.html#caching","title":"Caching","text":"<ul> <li>GPTCache</li> </ul>"},{"location":"Background/engineering/ecosystem.html","title":"Enabling Companies","text":""},{"location":"Background/engineering/ecosystem.html#building-and-deploying","title":"Building and deploying","text":"<ul> <li>Fixie</li> </ul>"},{"location":"Background/engineering/ecosystem.html#llm-training-deployment","title":"LLM Training + Deployment","text":"<ul> <li>\u203c\ufe0fCodeTF From Salesforce</li> <li>\u203c\ufe0fAzure Open AI samples Sample end-to-end use cases with chatbots, content generation. </li> <li>RLHF with DeepSpeed (Microsoft)</li> <li>vLLM a python repo to help run LLMs. </li> </ul>"},{"location":"Background/engineering/open_source_frameworks.html","title":"Open source frameworks","text":""},{"location":"Background/engineering/open_source_frameworks.html#operational-toolkits-for-llmops","title":"Operational Toolkits for LLMops","text":"<ul> <li>\u203c\ufe0fHugging Face Transformers</li> <li>\u203c\ufe0fAdapters for Hugging Face</li> <li> <p>\u203c\ufe0fOpen LLM</p> </li> <li> <p>Chatall To interact with multiple chatbots at the same time.</p> </li> <li>\u203c\ufe0f LocalAI drop-in replacement REST API that\u2019s compatible with OpenAI API specifications for local inferencing.</li> </ul>"},{"location":"Background/engineering/open_source_frameworks.html#for-llama","title":"For Llama","text":"<ul> <li>For Llama</li> <li>MedAlpaca</li> </ul>"},{"location":"Background/ethics_and_regulation/ethics.html","title":"Ethics and regulation","text":""},{"location":"Background/ethics_and_regulation/ethics.html#bias-and-fairness","title":"Bias and Fairness","text":"<p>Mitigating bias in data and models Evaluating model fairness Inclusive model development Transparency and Explainability</p>"},{"location":"Background/ethics_and_regulation/ethics.html#interpretability","title":"Interpretability","text":"<p>Techniques for explainability Right to explanation Safety</p>"},{"location":"Background/ethics_and_regulation/ethics.html#risk-mitigation","title":"Risk Mitigation","text":"<p>Risk assessment Safeguards against misuse Privacy</p>"},{"location":"Background/ethics_and_regulation/ethics.html#data-privacy","title":"Data privacy","text":"<p>Anonymization and de-identification Encryption and secure computing</p>"},{"location":"Background/ethics_and_regulation/ethics.html#governance","title":"Governance","text":"<p>Internal auditing processes External oversight Accountability measures Access and Inclusion</p>"},{"location":"Background/ethics_and_regulation/ethics.html#fair-and-equitable-access","title":"Fair and equitable access","text":"<p>Digital divides Participatory design Compliance</p>"},{"location":"Background/ethics_and_regulation/ethics.html#laws-and-regulations","title":"Laws and regulations","text":"<p>Responsible development guidelines Ethics review processes</p>"},{"location":"Background/interfaces_and_plugins/plugins.html","title":"Plugins","text":"<ul> <li>Mini Wob++ For web interactive environments for accomplishing different tasks. Quite useful.</li> </ul>"},{"location":"Background/interfaces_and_plugins/plugins.html#plugins","title":"Plugins","text":"<ul> <li>\u203c\ufe0fPrompt Genius</li> </ul> <p>-\ufe0f Utility: - Reliable GPT A wrapper that prevents failures due to rate limiting requests. </p> <ul> <li>\u203c\ufe0f FastChat Conversation This very nice 'multi model' chat interface class allows for effective translation between different models. </li> </ul>"},{"location":"Background/miscellaneous/detection.html","title":"Detection","text":"<ul> <li>Sapling AI content detector</li> </ul>"},{"location":"Background/models/index.html","title":"Models for Gen()AI","text":"<p>As of 2023, there are two primary domains of Generative AI, text-based and image-based. Though there is a whole host of other modalities that can be considered. </p> <p>We won't go into detail to the wide variety of generative AI models, but, instead will focus on the model architecture that is presently dominating the market: Transformers. </p> <p>Because prompting will be model dependent we also focus on prompting in this section. </p>"},{"location":"Background/models/index.html#available-models","title":"Available models","text":""},{"location":"Background/models/index.html#text-first","title":"Text (first)","text":"<ul> <li>Bard</li> <li>Claud</li> <li> <p>ChatGPT</p> </li> <li> <p>Medpalm</p> </li> <li>Llama (Non-commercial ??)</li> <li>Open Llama (Non-commercial ??)</li> <li>UAE Falcon (Apache License)</li> </ul>"},{"location":"Background/models/index.html#image-first","title":"Image (first)","text":"<ul> <li>StableLM: Stability AI Language Models  CC BY-SA-4.0</li> </ul>"},{"location":"Background/models/index.html#multimodal","title":"MultiModal","text":"<ul> <li>Unilm (MSFT</li> </ul>"},{"location":"Background/models/index.html#model-overviews","title":"Model Overviews","text":"<p>Below we provide references to concepts that extend beyond transformer-based models. - A Survey of Large Language Models A very comprehensive paper discussing LLM technology. </p>"},{"location":"Background/models/index.html#self-supervised-learning","title":"Self-supervised learning","text":"<ul> <li>\u203c\ufe0f A cookbook of self-supervised Learning </li> </ul>"},{"location":"Background/models/index.html#self-supervised-learning_1","title":"Self-supervised learning","text":"<ul> <li>\u203c\ufe0f A cookbook of self-supervised Learning </li> </ul>"},{"location":"Background/models/index.html#leaderboards-and-comparisons","title":"Leaderboards and comparisons","text":"<ul> <li>Hugging Face LLM leaderboard An essential chart for documenting the model peformance across multiple models.</li> <li>lmsys.org leader board</li> <li>Foundation model Providers EU AI compliance</li> </ul>"},{"location":"Background/models/index.html#to-sort","title":"TO SORT","text":"<ul> <li>Token Embedding: Mapping to a vector space. </li> <li>Positional Embedding: Learned or hard-coded mapping to position of sequence to a vector space</li> <li>Attention: Token being predicted is mapped to a query vector and tokens in context are mapped to key and value vectors. Inner products are used to combine to extract information. </li> <li>Bi-directional / unmasked</li> <li>Unidirectional / masked self attetion</li> <li>Cross attention applies attention to the primary sequence and treates the second token sequence the context. </li> <li>Multi-head attention. Multiple attention heads in parallel.</li> <li>Layer normalization. Found to be computationally efficient version sets m = beta = 0 or root mean square layer normalizagion or <code>RMSnorm</code>. </li> <li>Unembedding: Learns to convert vector intot he vocuabulary elements. </li> </ul> <p>Architectures:</p> <ul> <li>Encoder-Decoder (EDT), is also sequence-to-sequence. </li> <li>Encoder-only: (BERT)</li> <li>Decoder-only (GPT) Next-token </li> <li>Multi-domain decoder-only transformer (Gato)</li> </ul>"},{"location":"Background/models/metrics.html","title":"Metrics","text":""},{"location":"Background/models/metrics.html#metrics","title":"Metrics:","text":"<ul> <li>Exact Match (EM) </li> </ul>"},{"location":"Background/models/prompting.html","title":"Prompting","text":""},{"location":"Background/models/prompting.html#llm-prompting","title":"LLM Prompting","text":"<ul> <li>\u203c\ufe0fPrompting Guide</li> <li>Wolfram Prompt Repo</li> <li> <p>\u203c\ufe0fPrompt Engine (MSFT) database tool MIT license</p> </li> <li> <p>scale.com/spellbook</p> </li> </ul>"},{"location":"Background/models/prompting.html#prompt-engineering","title":"Prompt engineering","text":"<ul> <li> Prompting is Programming: A Query Language for Large Language Models</li> </ul>"},{"location":"Background/models/prompting.html#manual","title":"Manual","text":"<ul> <li> <p>OPEN AI best practices</p> </li> <li> <p>Go over all of these! https://www.promptingguide.ai/techniques</p> </li> <li>A Prompt Pattern Catalog to Enhance Prompt Engineering with ChatGPT </li> </ul>"},{"location":"Background/models/prompting.html#examples","title":"Examples","text":"<pre><code>Pretend you have an IQ of 120\n</code></pre>"},{"location":"Background/models/prompting.html#minimizing-ai-plagiarism-prompting-strategy","title":"Minimizing AI- plagiarism prompting strategy.","text":"<p>\"You are a creative writer, and you like to write everything differently from others. Your task is to follow the instructions below and continue writing at the end of the text given. The instructions (given in markdown format) are \u201cWrite in a way different from the actual continuation, if there is one\u201d, and \u201cNo plagiarism is allowed\u201d.\" https://arxiv.org/pdf/2304.08637.pdf </p>"},{"location":"Background/models/prompting.html#according-to","title":"'According To'","text":"<ul> <li>\u201cAccording to ...\u201d Prompting Language Models Improves Quoting from Pre-Training Data The grounding prompt <code>According to { some_reputable_source}</code> prompt inception additions increases output quality improves over the null prompt in nearly every dataset and metric, typically by 5-15%.</li> </ul> <pre><code>According to {some_reputable_source} ...\n</code></pre>"},{"location":"Background/models/prompting.html#summary","title":"Summary:","text":"<ul> <li>Provide several examples to ground it.</li> <li>Good to evaluate this and see if input examples give expected scores. Modify the prompt if it isn't. </li> <li>Consider prompt versioning to keep track of outputs more easily.</li> <li>Breag prompts into smaller prompts</li> <li>Chain of Thought Prompting</li> <li>Generate many outputs and pick final one or use LLM to pick best one. Self consistency technique</li> <li>NOTE: Not model universal and not robust to updated changes: not stable. </li> </ul>"},{"location":"Background/models/prompting.html#automatic","title":"Automatic","text":""},{"location":"Background/models/prompting.html#prompt-compression","title":"Prompt compression","text":"<ul> <li>Learning to Compress Prompts with Gist Tokens. Can enable 26x compression and 40% FLOP reduction and improvements. Trains 'gist tokens' to summarize information. </li> </ul>"},{"location":"Background/models/prompting.html#resources","title":"Resources","text":"<ul> <li>\u203c\ufe0f Awesome Prompts</li> <li>\u203c\ufe0f Prompt Engineering by Lillian Wang</li> <li>Prompt Engineering Guide</li> <li>Best practices for prompt engineering</li> <li>Chain of Thought Prompting Elicits Reasoning in Large Language Models</li> <li>Automatic Prompt Engineering \u2192 Gave a CoT improvement suggestion \"Let's work this out in a step by step by way to be sure we have the right answer.\"</li> <li>Techniques to improve reliability By OpenAI </li> <li>Give clearer instructions</li> <li>Split complex tasks into simpler subtasks</li> <li>Structure the instruction to keep the model on task</li> <li>Prompt the model to explain before answering</li> <li>Ask for justifications of many possible answers, and then synthesize</li> <li>Generate many outputs, and then use the model to pick the best one</li> <li>Fine-tune custom models to maximize performance</li> </ul>"},{"location":"Background/models/prompting.html#prompt-tuning","title":"Prompt tuning","text":"<p>Uses a layer to not change prompts but change the embedding of the prompts.  - The Power of Scale for Parameter-Efficient Prompt Tuning Boosted Prompting: few shot prompts that progressively solve more of the problem.</p>"},{"location":"Background/models/prompting.html#prompt-and-optimization","title":"Prompt and optimization","text":"<ul> <li>Large Language Models Can Self Improve Using Chain of thought to provide better examples and then fine-tune the LLM. </li> <li> <p>Refiner Iteratively improves itself based on an LLM critic </p> </li> <li> <p>PROMPT generator To save a few words by just entering a persona and igives prompt output. </p> </li> </ul>"},{"location":"Background/models/prompting.html#manual-prompt-optimization","title":"Manual Prompt optimization","text":""},{"location":"Background/models/prompting.html#auto-prompt-optimizations","title":"Auto Prompt Optimizations","text":"<p>A good description of advanced prompt tuning <pre><code>AutoPrompt [5] combines the original prompt input with a set of shared (across all input data) \u201ctrigger tokens\u201d that are selected via a gradient-based search to improve performance.\n\nPrefix Tuning [6] adds several \u201cprefix\u201d tokens to the prompt embedding in both input and hidden layers, then trains the parameters of this prefix (leaving model parameters fixed) with gradient descent as a parameter-efficient fine-tuning strategy.\n\nPrompt Tuning [7] is similar to prefix tuning, but prefix tokens are only added to the input layer. These tokens are fine-tuned on each task that the language model solves, allowing prefix tokens to condition the model for a given task.\n\nP-Tuning [8] adds task-specific anchor tokens to the model\u2019s input layer that are fine-tuned but allows these tokens to be placed at arbitrary locations (e.g., the middle of the prompt), making the approach more flexible than prefix tuning.\n\n[5] Shin, Taylor, et al. \"Autoprompt: Eliciting knowledge from language models with automatically generated prompts.\" arXiv preprint arXiv:2010.15980 (2020).\n\n[6] Li, Xiang Lisa, and Percy Liang. \"Prefix-tuning: Optimizing continuous prompts for a generation.\" arXiv preprint arXiv:2101.00190 (2021).\n\n[7] Lester, Brian, Rami Al-Rfou, and Noah Constant. \"The power of scale for parameter-efficient prompt tuning.\" arXiv preprint arXiv:2104.08691 (2021).\n\n[8] Liu, Xiao, et al. \"GPT understands, too.\" arXiv preprint arXiv:2103.10385 (2021).\n</code></pre></p>"},{"location":"Background/models/transformers.html","title":"Transformers","text":""},{"location":"Background/models/transformers.html#transformers","title":"Transformers","text":""},{"location":"Background/models/transformers.html#components","title":"Components","text":"<p>TODO: Describe transformers and components</p>"},{"location":"Background/models/transformers.html#references-and-research","title":"References and Research","text":"<ul> <li>Amazing Presentation on Transformers</li> </ul>"},{"location":"Background/models/transformers.html#basic-transformer-information","title":"Basic Transformer information","text":"<ul> <li>Attention Is All you Need Initial paper indicating that attention is very powerful and potential replacement of LLM architectures. </li> <li>Neural Machine Translation by Jointly Learning to Align and Translate First paper indicating the notion of 'attention' sort of mechanism.</li> </ul>"},{"location":"Background/models/transformers.html#positional-encoding","title":"Positional Encoding","text":"<p>This component helps to remove the impilcit position-independence that 'vanilla' attention methods have.  </p> <ul> <li>A Gentle Introduction to Positional Encoding in Transformer Models, pt1</li> </ul>"},{"location":"Background/models/transformers.html#improvements","title":"Improvements","text":""},{"location":"Background/models/transformers.html#gpt","title":"GPT","text":"<ul> <li>Illustrated GPT</li> <li>How GPT3 works</li> <li>Five years of progress in GPTs Excellent summary of the progress of GPT over time, revealing core components, optimizations, and essential variations to the major Foundation model architectures.</li> <li>Formal Algorithms for Transformers in 2023 Important discussion revealing the components of Transformers.</li> </ul>"},{"location":"Background/models/transformers.html#improvements-and-optimizations","title":"Improvements and Optimizations","text":""},{"location":"Background/models/transformers.html#focusing-on-context-windows","title":"Focusing on context-windows","text":"<ul> <li> <p>Scaling Transformer to 1M tokens and beyond with RMT Github Uses a Recurrent Memory Transformer(RMT) architecture to extend understanding to large lengths. </p> </li> <li> <p>\u203c\ufe0fMEGABYTE: Predicting Million-byte Sequences with Multiscale Transformers MEGABYTE segments sequences into patches and uses a local submodel within patches and a global model between patches</p> </li> <li> <p>Hyena Architecture Uses inspiration from FFT to create a drop in replacement for Transformer models. Quite complex and maybe overhyped.</p> </li> <li> <p>Infinite former  Uses a representation of input sequence as a continuous signal expressed in a combination of N radial basis functions. Promising but potentially complex. Worth consideration Github</p> </li> </ul>"},{"location":"Background/models/transformers.html#to-reduce-compute","title":"To reduce compute","text":"<p>SpQR: A Sparse-Quantized Representation for Near-Lossless LLM Weight Compression</p>"},{"location":"Background/models/transformers.html#fine-tuning","title":"Fine Tuning","text":"<p>Using examples to fine-tune a model can reduce the number of tokens needed to achieve a sufficiently reasonable response. Can be expensive to retrain though.</p> <ul> <li>Symbol Tuning Improves in-context learning in Language Models </li> </ul>"},{"location":"Background/models/transformers.html#modality-variations","title":"Modality variations","text":""},{"location":"Background/models/transformers.html#vision","title":"Vision","text":""},{"location":"Background/models/transformers.html#graphs","title":"Graphs","text":"<ul> <li>Transformers Meet Directed Graphs An interesting-if-also-complex variation of Transformer GNNs that uses 'direction-aware' positional encodings to help handle both undirected and directed graphs. </li> </ul>"},{"location":"Background/models/transformers.html#fairness-enablement","title":"Fairness Enablement","text":"<ul> <li>Concept Erasure</li> </ul>"},{"location":"Background/models/transformers.html#training-variations","title":"Training variations","text":"<ul> <li>LinkBERT places in the context window hyperlinked references to achieve better performance.  </li> </ul>"},{"location":"Background/models/transformers.html#multimodal","title":"Multimodal","text":"<ul> <li>\u203c\ufe0f Visual GPT</li> <li>\u203c\ufe0f Language is not all you need</li> </ul>"},{"location":"Background/models/transformers.html#abstractions","title":"Abstractions","text":"<ul> <li>Looped Transformers and Programmable Computers Understanding that transformer networks can simulate complex algorithms when hardcoded with specific weights and made intoa  loop. 'Machine Learning' 'Machine code'. \"We demonstrate that a constant number of encoder layers can emulate basic computing blocks, including embedding edit operations, non-linear functions, function calls, program counters, and conditional branches. Using these building blocks, we emulate a small instruction-set computer.\"</li> </ul>"},{"location":"Background/overview/index.html","title":"Overview","text":"<p>The base components of GENAI</p>"},{"location":"Background/overview/applications.html","title":"Applications","text":""},{"location":"Background/overview/applications.html#software","title":"Software","text":""},{"location":"Background/overview/applications.html#code","title":"Code","text":"<ul> <li>Wizard Coding</li> <li>AutoPR</li> </ul>"},{"location":"Background/overview/applications.html#component-replacements","title":"Component replacements","text":"<ul> <li>GPT as backend</li> </ul>"},{"location":"Background/overview/applications.html#book-writing","title":"Book Writing","text":"<ul> <li> <p>Pyprompt chatgpt</p> </li> <li> <p>Motion GPT</p> </li> </ul>"},{"location":"Background/overview/applications.html#science-and-tech","title":"Science and Tech","text":"<ul> <li>Emergent autonomous scientific research </li> </ul>"},{"location":"Background/overview/applications.html#robotics","title":"Robotics","text":"<ul> <li>CLAIRIFY Translates English to domain-specific languages like robots. </li> <li>https://arxiv.org/abs/2303.14100</li> </ul>"},{"location":"Background/overview/applications.html#healthcare","title":"Healthcare","text":"<ul> <li>Health system-scale language models are all-purpose prediction engines Uses LLM based system to integrate real time clinical workflows with note-writing and electronic ordering. Generally quite-performant and. a great indication of how they could be used to predict things such as readmission rates, and many other applications. </li> </ul>"},{"location":"Background/overview/applications.html#chemistry","title":"Chemistry","text":"<ul> <li>Grammar-Induced Geometry for Data-Efficient Molecular Property Prediction A quality framework using heirarchichal metagraphs to stitch-together molecular nodes resulting in leaves that are 'actual' molecules. Using graph neural-diffusion, it does amazingly well even with minimal data-sets (100 examples).  </li> </ul>"},{"location":"Background/overview/applications.html#biology","title":"Biology","text":"<ul> <li>Evolutionary-scale prediction of atomic-level protein structure with a language model End to end Language model enabling structure sequence pairing, coupled with an equivariant transformer structure model at the end. </li> <li>https://arxiv.org/pdf/2303.16416.pdf</li> <li>https://arxiv.org/abs/2304.02496</li> <li>\uff01Biomedical simulation</li> </ul>"},{"location":"Background/overview/applications.html#societal-simulations","title":"Societal simulations","text":"<ul> <li>Generative Agents: Interactive Simulacra of Human Behavior:    They gave 25 AI agents motivations &amp; memory, and put them in a simulated town. Not only did they engage in complex behavior (including throwing a Valentine\u2019s Day party) but the actions were rated more human than humans roleplaying.   Demo: https://t.co/pYNF4BBveG</li> </ul>"},{"location":"Background/overview/applications.html#finance","title":"Finance","text":"<ul> <li>ML for trading (NOT LLM based)</li> <li>https://github.com/irgolic/AutoPR</li> <li>Finance GPT LLMs for finance</li> </ul>"},{"location":"Background/overview/applications.html#second-brain","title":"Second Brain","text":"<ul> <li>\u203c\ufe0f \u203c\ufe0f Quiver A LLM for self Second brain. </li> </ul>"},{"location":"Background/overview/extra_resources.html","title":"Extra resources","text":""},{"location":"Background/overview/extra_resources.html#videos","title":"Videos","text":"<p>State of GPT by Andrej Karpathy </p> <ul> <li>Lex Fridman</li> <li>David Shapiro</li> <li>AI Explained</li> <li> <p>Yannic Kilcher</p> </li> <li></li> </ul>"},{"location":"Background/overview/extra_resources.html#whole-system","title":"Whole system","text":"<ul> <li>\u203c\ufe0fEmerging Architectures for LLM Applications A very nice high overview of the component market for LLM architectures.</li> </ul>"},{"location":"Background/overview/extra_resources.html#llms","title":"LLMs","text":"<ul> <li> <p>A Survey of Large Language Models A very comprehensive paper discussing LLM technology. </p> </li> <li> <p>Understanding Large Language Models</p> </li> </ul>"},{"location":"Background/overview/extra_resources.html#llm-prompting","title":"LLM Prompting","text":"<ul> <li> <p>\u203c\ufe0fLLM Practical Guide based on paper.</p> </li> <li> <p>\u203c\ufe0fPrompting Guide</p> </li> <li>Wolfram Prompt Repo</li> <li>\u203c\ufe0fPrompt Engine (MSFT) database tool MIT license</li> </ul>"},{"location":"Background/overview/extra_resources.html#video-podcasts","title":"Video + Podcasts","text":"<ul> <li>Lex Fridman</li> <li>David Shapiro</li> <li>AI Explained</li> <li>Yannic Kilcher</li> <li>State of GPT by Andrej Karpathy</li> </ul>"},{"location":"Background/training/index.html","title":"Training","text":"<ul> <li> <p>LLM Engineering by Huyen Chip</p> </li> <li> <p>The whole training process by Huyen Chip</p> </li> </ul>"},{"location":"Background/training/index.html#frameworks","title":"Frameworks","text":"<ul> <li>Levanter (not just LLMS)  Codebase for training FMs with JAX. Using Haliax for naming tensors field-names instead of indexes. (for example Batch, Feature....). Full sharding and distributable / parallelizable. </li> <li> <p>DeepSpeed ZeRO++ A framework for accelerating model pre-training, finetuning, RLHF updating.  by minimizing communication overhead. A likely essential concept to be very familiar with. </p> </li> <li> <p>\u203c\ufe0fRL4LMs by microsoft A modular RL library to fine-tune language models to human preferences. paper</p> </li> </ul>"},{"location":"Background/training/index.html#methods-and-improvements","title":"Methods and IMprovements","text":""},{"location":"Background/training/index.html#fine-tuning-using-distillation","title":"Fine Tuning using Distillation","text":"<p>Train on model trains a new model on the output of a new model.  - Alpaca </p>"},{"location":"Background/training/index.html#fine-tuning-optimizations","title":"Fine tuning Optimizations","text":"<ul> <li>Full Parameter Fine-Tuning for Large Language Models with Limited Resources. Introduces LOMO: LOw-Memory Optimization to fuse </li> </ul>"},{"location":"Background/training/index.html#adapter-layers","title":"Adapter layers","text":"<ul> <li>AdapterHub: A Framework for Adapting Transformers Website Adapters are efficient and performant layers that can optimize performance without needing to do inefficient fine-tuning. </li> </ul>"},{"location":"Background/training/index.html#rlhf","title":"RLHF","text":"<ul> <li>\u203c\ufe0f RLHF basics by hugging face A realy good intro to parse again.</li> <li>RLHF for Palm in Pytorch</li> <li>AligningLargeLanguageModelsthroughSyntheticFeedback Using a heirarchy of systems to </li> </ul>"},{"location":"Background/training/index.html#ai-enabled-ranking","title":"AI-enabled ranking","text":"<ul> <li>Can foundation models label data like humans? using GPT to review model outputs produced biased results. Changing the prompt doesn't really help to de-bias it. Lots of additional considerations surrounding model evaluation</li> </ul>"},{"location":"Background/training/index.html#multi-model-methods","title":"Multi-model methods","text":"<ul> <li>Scaling Expert Language Models with Unsupervised Domain Discovery \"parse language models on arbitrary text corpora. Our method clusters a corpus into sets of related documents, trains a separate expert language model on each cluster, and combines them in a sparse ensemble for inference. This approach generalizes embarrassingly parallel training by automatically discovering the domains for each expert, and eliminates nearly all the communication overhead of existing sparse language models. \"</li> </ul>"},{"location":"Background/training/index.html#pruning-and-compression","title":"Pruning and compression","text":"<ul> <li>SparseGPT: Massive Language Models Can Be Accurately Pruned in One-Shot Remove up to ~50% parameters preserving performance</li> <li>Scaling Expert Language Models with Unsupervised Domain Discovery Cluster-Branch-Train-Merge (c-BTM), a new way to scale sparse expert LLMs on any dataset. Github</li> <li>SqueezeLLM They are able to have 2x fold in model size for equivalent performance in perplexity. They use 'Dense and SParce Quantization' Github</li> </ul>"},{"location":"this_project/index.html","title":"This project","text":"<p>Thanks for being interested in this project. This relays how we are putting together the components that enable this project to exist.</p>"},{"location":"this_project/contributing.html","title":"Contributing","text":"<p>In order to contribute...</p>"}]}