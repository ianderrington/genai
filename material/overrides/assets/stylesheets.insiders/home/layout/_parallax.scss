////
/// Copyright (c) 2016-2023 Martin Donath <martin.donath@squidfunk.com>
///
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following conditions:
///
/// The above copyright notice and this permission notice shall be included in
/// all copies or substantial portions of the Software.
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
/// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS
////

// ----------------------------------------------------------------------------
// Rules
// ----------------------------------------------------------------------------

// Parallax variables
:root {
  --md-parallax-perspective: #{px2rem(50px)};
}

// ----------------------------------------------------------------------------

// Parallax
.mdx-parallax {
  width: 100vw;
  height: 100vh;
  margin-top: px2rem(-48px);
  overflow: hidden auto;
  perspective: var(--md-parallax-perspective);
  overscroll-behavior-y: none;
  scroll-behavior: smooth;

  // Parallax group
  &__group {
    position: relative;
    display: block;
    color: var(--md-typeset-color);
    background-color: var(--md-default-bg-color);
    transform-style: preserve-3d;

    // First parallax group which contains the hero
    &:first-child {
      height: 140vh;
      background-color: transparent;
      // Hack: setting `contain` reduces pressure on the GPU, as it mitigates
      // a bug in WebKit where the scale is not accounted for when calculating
      // element size, as noted in https://bit.ly/3LRC25r. Unfortunately, we
      // can't use the technique laid out in this StackOverflow answer, because
      // using the bottom as perspective origin totally messes up positioning,
      // but setting `contain` seems to solve the issue at hand.
      contain: strict;

      // Of course, how could it be otherwise, Safari doesn't properly support
      // this property, so we must disable it via JavaScript. Browsers, eh?
      .safari & {
        contain: none;
      }

      // Hack: we can't use `vw` and `vh` in division, but we have to ensure a
      // correct aspect ratio for the wrapper. Don't mind the magic numbers.
      @for $i from 0 through 6 {
        @media (min-width: #{125 + 12.5 * $i}vh) {
          height: #{120 + 5 * $i}vw;
        }
      }
    }

    // Last parallax group contains footer
    &:last-child {
      background-color: var(--md-default-bg-color);
    }
  }

  // Parallax layer
  &__layer {
    position: absolute;
    top: 0;
    z-index: calc(10 - var(--md-parallax-depth, 0));
    width: 100vw;
    height: max(120vh, 100vw);
    pointer-events: none;
    transform:
      translateZ(
        calc(
          var(--md-parallax-perspective) *
          var(--md-parallax-depth) * -1
        )
      )
      scale(
        calc(
          var(--md-parallax-depth) + 1
        )
      );
    transform-origin: 50vw 50vh;
  }

  // Parallax layer: image - we use `object-fit` and `object-position` so we
  // can use responsive imagery, since CSS `srcset` and `sizes` support is meh.
  &__image {
    position: absolute;
    z-index: -1;
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: var(--md-image-position, 50%);
  }

  // Parallax layer: gradient
  &__blend {
    top: initial;
    bottom: 0;
    height: min(100vh, 100vw);
    background-image:
      linear-gradient(
        to bottom,
        transparent,
        var(--md-default-bg-color)
      );
  }
}
